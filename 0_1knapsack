#include <iostream>
#include <vector>
#include <algorithm>

using namespace std;

int knapsack(int W, const vector<int>& weights, const vector<int>& profits, int n) {
    vector<vector<int> > dp(n + 1, vector<int>(W + 1, 0));

    for (int i = 1; i <= n; ++i) {
        for (int w = 0; w <= W; ++w) {
            if (weights[i - 1] <= w) {
                dp[i][w] = max(profits[i - 1] + dp[i - 1][w - weights[i - 1]], dp[i - 1][w]);
            } else {
                dp[i][w] = dp[i - 1][w];
            }
        }
    }

    return dp[n][W];
}

int main() {
    int n, W;
    cout << "Enter the number of items: ";
    cin >> n;

    vector<int> weights(n), profits(n);
    cout << "Enter the weights of the items:\n";
    for (int i = 0; i < n; ++i) {
        cin >> weights[i];
    }

    cout << "Enter the profits of the items:\n";
    for (int i = 0; i < n; ++i) {
        cin >> profits[i];
    }

    cout << "Enter the capacity of the knapsack: ";
    cin >> W;

    int maxProfit = knapsack(W, weights, profits, n);
    cout << "Maximum profit that can be obtained = " << maxProfit << endl;

    return 0;
}

